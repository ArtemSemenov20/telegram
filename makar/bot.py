import asyncio
import logging
import random

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, URLInputFile, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

import config
from cod import get_map_cell



logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.token)
dp = Dispatcher()

cols, rows = 10, 10
maps = {}

def get_keyboard():
     # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [
        [
            types.InlineKeyboardButton(text='‚Üë', callback_data='up',),
        ],
        [
            types.InlineKeyboardButton(text='‚Üê', callback_data='left',),
            types.InlineKeyboardButton(text='‚Üí', callback_data='right'),
        ],
        [
            types.InlineKeyboardButton(text='‚Üì', callback_data='down', ),
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def get_map_str(map_cell, player):
    # —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞—Ä—Ç—ã.
    map_str = ""
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–π –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    for y in range(rows * 2 - 1):
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        for x in range(cols * 2 - 1):
            # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞ –≤ map_cell —è–≤–ª—è–µ—Ç—Å—è True, —Ç–æ–≥–¥–∞.
            if map_cell[x + y * (cols * 2 - 1)]:
                # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª.
                map_str += "‚¨õ"
                # –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–∞, —Ç–æ–≥–¥–∞.
            elif (x, y) == player:
                # –º—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª.
                map_str += "üî¥"
                # –∏–ª–∏ (–≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.)
            else:
                # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª.
                map_str += "‚¨ú"
                # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ map_cell, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ –≤—Å–µ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏.
        map_str += "\n"
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤ –∫–∞—Ä—Ç—É.
    return map_str

@dp.message(Command("play"))
async def cmd_start(message: types.Message):
     # c–æ–∑–¥–∞–µ–º –ª–∞–±–µ—Ä–∏–Ω—Ç
     map_cell = get_map_cell(cols, rows)
     # —Å–æ–¥–µ—Ä–∂–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü—ã—é –æ –ª–∞–±–µ—Ä–∏–Ω—Ç–µ –∏ –≥–¥–µ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
     user_data = {
          'map': map_cell,
          'x': 0,
          'y': 0
     }

     maps[message.chat.id] = user_data
     print(maps.keys())
     print(message.chat.id)
     await message.answer(get_map_str(map_cell, (0, 0)), reply_markup=get_keyboard())

@dp.callback_query()
async def callback_func(query: types.CallbackQuery, bot: Bot):
    print(maps.keys())
    print(query.message.chat.id)
    user_data = maps[query.message.chat.id]
    new_x, new_y = user_data['x'], user_data['y']


    if query.data == 'left':
        new_x -= 1
    if query.data == 'right':
        new_x += 1
    if query.data == 'up':
        new_y -= 1
    if query.data == 'down':
        new_y += 1

    user_data['x'], user_data['y'] = new_x, new_y
    maps[query.message.chat.id] = user_data
    await bot.edit_message_text(get_map_str(user_data['map'], (new_x, new_y)), query.message.chat.id, query.message.message_id,
                                reply_markup=get_keyboard())








async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
